{"version":3,"file":"react-currency-input.min.js","sources":["../src/mask.js","../src/object-assign-polyfill.js","../src/index.js"],"sourcesContent":["\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    let digits = value.match(/\\d/g) || ['0'];\n    \n    let numberIsNegative = false;\n    if (allowNegative) {\n        let negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        let allDigitsAreZero = true;\n        for (let idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    let raw = Number(digits.join(''));\n\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n","Object.assign = Object.assign ||\n  function(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n","import './object-assign-polyfill';\n\nimport PropTypes from 'prop-types';\nimport React, { Component }  from 'react'\nimport ReactDOM from 'react-dom'\nimport mask from './mask.js'\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nclass CurrencyInput extends Component {\n    constructor(props) {\n        super(props);\n        this.prepareProps = this.prepareProps.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.state = this.prepareProps(this.props);\n\n        this.inputSelectionStart = 1;\n        this.inputSelectionEnd = 1;\n    }\n\n\n    /**\n     * Exposes the current masked value.\n     *\n     * @returns {String}\n     */\n    getMaskedValue() {\n        return this.state.maskedValue;\n    }\n\n\n    /**\n     * General function used to cleanup and define the final props used for rendering\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n     */\n    prepareProps(props) {\n        let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\n        delete customProps.onChange;\n        delete customProps.onChangeEvent;\n        delete customProps.value;\n        delete customProps.decimalSeparator;\n        delete customProps.thousandSeparator;\n        delete customProps.precision;\n        delete customProps.inputType;\n        delete customProps.allowNegative;\n        delete customProps.allowEmpty;\n        delete customProps.prefix;\n        delete customProps.suffix;\n        delete customProps.selectAllOnFocus;\n        delete customProps.autoFocus;\n\n        let initialValue = props.value;\n        if (initialValue === null) {\n            initialValue = props.allowEmpty? null : '';\n        }else{\n\n            if (typeof initialValue == 'string') {\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n                // Now they have two problems.\n\n                // Strip out thousand separators, prefix, and suffix, etc.\n                if (props.thousandSeparator === \".\"){\n                    // special handle the . thousand separator\n                    initialValue = initialValue.replace(/\\./g, '');\n                }\n\n                if (props.decimalSeparator != \".\"){\n                    // fix the decimal separator\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n                }\n\n                //Strip out anything that is not a digit, -, or decimal separator\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\n\n                // now we can parse.\n                initialValue = Number.parseFloat(initialValue);\n            }\n            initialValue = Number(initialValue).toLocaleString(undefined, {\n                style                : 'decimal',\n                minimumFractionDigits: props.precision,\n                maximumFractionDigits: props.precision\n            })\n\n        }\n\n        const { maskedValue, value } = mask(\n            initialValue,\n            props.precision,\n            props.decimalSeparator,\n            props.thousandSeparator,\n            props.allowNegative,\n            props.prefix,\n            props.suffix\n        );\n\n        return { maskedValue, value, customProps };\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\n     *\n     * @param nextProps\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.prepareProps(nextProps));\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n     */\n    componentDidMount(){\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let selectionStart, selectionEnd;\n\n        if (this.props.autoFocus) {\n            this.theInput.focus();\n            selectionEnd = this.state.maskedValue.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        } else {\n            selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n            selectionStart = Math.min(node.selectionStart, selectionEnd);\n        }\n\n        node.setSelectionRange(selectionStart, selectionEnd);\n    }\n\n\n    /**\n     * Component lifecycle function\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n     */\n    componentWillUpdate() {\n        let node = ReactDOM.findDOMNode(this.theInput);\n        this.inputSelectionStart = node.selectionStart;\n        this.inputSelectionEnd = node.selectionEnd;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n     */\n    componentDidUpdate(prevProps, prevState){\n        const { decimalSeparator } = this.props;\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n        let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n        let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n\n        let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n        let separatorsRegex = new RegExp(decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n        let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n        let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n        let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n        selectionEnd = selectionEnd + adjustment;\n        selectionStart = selectionStart + adjustment;\n\n        const precision = Number(this.props.precision);\n\n        let baselength = this.props.suffix.length\n            + this.props.prefix.length\n            + (precision > 0 ? decimalSeparator.length : 0) // if precision is 0 there will be no decimal part\n            + precision\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n        if (this.state.maskedValue.length == baselength){\n            // if we are already at base length, position the cursor at the end.\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        }\n\n        node.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    /**\n     * onChange Event Handler\n     * @param event\n     */\n    handleChange(event) {\n        event.preventDefault();\n        let { maskedValue, value } = mask(\n            event.target.value,\n            this.props.precision,\n            this.props.decimalSeparator,\n            this.props.thousandSeparator,\n            this.props.allowNegative,\n            this.props.prefix,\n            this.props.suffix\n        );\n\n        event.persist();  // fixes issue #23\n\n        this.setState({ maskedValue, value }, () => {\n            this.props.onChange(maskedValue, value, event);\n            this.props.onChangeEvent(event, maskedValue, value);\n        });\n    }\n\n\n    /**\n     * onFocus Event Handler\n     * @param event\n     */\n    handleFocus(event) {\n        if (!this.theInput) return;\n\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n        let selectionEnd = this.theInput.value.length - this.props.suffix.length;\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n        this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    handleBlur(event) {\n        this.inputSelectionStart = 0;\n        this.inputSelectionEnd = 0;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\n     */\n    render() {\n        return (\n            <input\n                ref={(input) => { this.theInput = input; }}\n                type={this.props.inputType}\n                value={this.state.maskedValue}\n                onChange={this.handleChange}\n                onFocus={this.handleFocus}\n                onMouseUp={this.handleFocus}\n                {...this.state.customProps}\n            />\n        )\n    }\n}\n\n\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    decimalSeparator: PropTypes.string,\n    thousandSeparator: PropTypes.string,\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inputType: PropTypes.string,\n    allowNegative: PropTypes.bool,\n    allowEmpty: PropTypes.bool,\n    prefix: PropTypes.string,\n    suffix: PropTypes.string,\n    selectAllOnFocus: PropTypes.bool\n};\n\n\nCurrencyInput.defaultProps = {\n    onChange: function(maskValue, value, event) {/*no-op*/},\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\n    autoFocus: false,\n    value: '0',\n    decimalSeparator: '.',\n    thousandSeparator: ',',\n    precision: '2',\n    inputType: 'text',\n    allowNegative: false,\n    prefix: '',\n    suffix: '',\n    selectAllOnFocus: false\n};\n\n\nexport default CurrencyInput\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","undefined","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","parseFloat","CurrencyInput","props","super","this","prepareProps","bind","handleChange","handleFocus","state","inputSelectionStart","inputSelectionEnd","getMaskedValue","customProps","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","autoFocus","initialValue","replace","RegExp","toLocaleString","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentDidMount","selectionStart","selectionEnd","node","ReactDOM","findDOMNode","theInput","focus","Math","min","setSelectionRange","componentWillUpdate","componentDidUpdate","prevProps","prevState","isNegative","minPos","max","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","const","baselength","event","preventDefault","persist","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","Component","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}